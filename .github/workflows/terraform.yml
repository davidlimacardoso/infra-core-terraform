name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

permissions:
  pull-requests: write
  id-token: write
  contents: read

env:
  ENV: ${{ inputs.environment }}
  AWS_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.AWS_ROLE }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:

  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      workdir: ${{ steps.get-dir.outputs.WORKDIR }}

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Print Github events
      #   run: echo ${{ toJson(github) }}
      #   continue-on-error: true

      - name: Get modified files from GitHub API
        id: get-dir
        run: |
          BASE_REF="${{ github.base_ref }}"
          HEAD_REF="${{ github.head_ref }}"

          # URL da API do GitHub
          API_URL="https://api.github.com/repos/davidlimacardoso/infra-core-terraform/compare/${BASE_REF}...test/workflow"

          # Obter a lista de arquivos modificados
          response=$(curl -s $API_URL)

          # Filtrar arquivos que comeÃ§am com 'infra/'
          files=$(echo "$response" | jq -r '.files[] | select(.filename | startswith("infra/")) | .filename')

          # Arrays para armazenar os Cloud Providers e contas modificadas
          cloud_providers=()
          accounts=()

          # Analisar os arquivos modificados
          for file in $files; do
            # Extrair o Cloud Provider e a conta do caminho do arquivo
            cloud_provider=$(echo $file | cut -d'/' -f2)
            account=$(echo $file | cut -d'/' -f3)

            # Adicionar o Cloud Provider e a conta aos arrays
            if [[ ! " ${cloud_providers[@]} " =~ " ${cloud_provider} " ]]; then
              cloud_providers+=("$cloud_provider")
            fi
            if [[ ! " ${accounts[@]} " =~ " ${account} " ]]; then
              accounts+=("$account")
            fi
          done

          # Verificar se hÃ¡ mais de um Cloud Provider modificado
          if [ ${#cloud_providers[@]} -gt 1 ]; then
            echo "Favor modificar somente um Cloud Provider por vez."
            exit 1
          fi

          # Verificar se hÃ¡ mais de uma conta modificada dentro do Cloud Provider
          if [ ${#accounts[@]} -gt 1 ]; then
            echo "Favor modificar somente uma conta por vez."
            exit 1
          fi

          # Retornar o caminho da conta modificada
          if [ ${#accounts[@]} -eq 1 ]; then
            echo "Conta modificada: infra/${cloud_providers[0]}/${accounts[0]}"
            FILE_PATH="infra/${cloud_providers[0]}/${accounts[0]}"
            echo "WORKDIR=$FILE_PATH" >> $GITHUB_ENV
          else
            echo "Nenhuma modificaÃ§Ã£o detectada em infra/aws, infra/gcp ou infra/oci."
            exit 1
          fi

      - name: Authenticate in the AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: "${{ env.AWS_ROLE }}"
          aws-region: "${{ env.AWS_REGION }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKDIR }}

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.WORKDIR }}
   
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKDIR }}

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}
        working-directory: ${{ env.WORKDIR }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -detailed-exitcode -no-color -input=false -var-file=envs/${{ env.ENV }}.tfvars -out {{ env.ENV }}.tfplan > plan_output.txt
        working-directory: ${{ env.WORKDIR }}
        continue-on-error: true
 
      - name: Hide Previous Comments
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment Plan Output
        uses: actions/github-script@v6
        # if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput = fs.readFileSync('${{ env.WORKDIR }}/plan_output.txt', 'utf8');

            const lines = planOutput.split('\n');
            const modifiedLines = lines.map(line => {
                // Analize if line start with this signals: '+', '-' ou '~'
                const trimmedLine = line.trim();
                if (trimmedLine.startsWith('+') || trimmedLine.startsWith('-') || trimmedLine.startsWith('~')) {
                    // Capture the sihnal
                    const sign = trimmedLine[0];
                    // Remove the sign and the first space, then add the corresponding sign at the beginning
                    let newLine = line.replace(/^[+\-~]\s*/, ' ').replace(/^ /, sign === '~' ? '! ' : sign + ' ');
                    return newLine;
                }
                return line;
            });

            // Merge modified lines into a single string
            planOutput = modifiedLines.join('\n');

            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Workspace ðŸ¤–\`${{ steps.workspace.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
  
            \`\`\`diff
            ${planOutput}
            \`\`\`
  
            </details>
            
            \:rocket\: To apply this plan, run this command\: \`\/apply\`

            \n
  
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
  apply: 
    if: >
      github.event_name == 'issue_comment' &&
      github.event.comment.body == '/apply'
    needs: plan
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write  
      contents: write
    
    env: 
      ENV: ${{ inputs.environment }}
      WORKDIR: ${{ needs.plan.outputs.workdir }}
      
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:

      - name: Debug Github
        run: echo ${{ toJSON(github) }}

      - name: Notify Applying Settings
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = "\>\:rocket\: Applying the settings...";
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
              
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKDIR }}
        
      - name: Terraform Workspace
        id: workspace
        run: |
          terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}
        working-directory: ${{ env.WORKDIR }}

      - name: Terraform Apply
        id: apply
        run: |
          cd ${{ env.WORKDIR }}
          terraform apply -no-color {{ env.ENV }}.tfplan
        continue-on-error: true

      - name: Comment Apply Output
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const command = context.payload.comment.body;
            const outcome = "${{ steps.apply.outcome }}";
            const emoji = outcome === 'failure' ? ':x:' : ':white_check_mark:';
            const output = `#### Terraform Apply Output \`${outcome}\` ${emoji}
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }} 
            ${{ steps.apply.outputs.stderr }}
            \`\`\`
            *Executed by: @${{ github.actor }}, Terraform command: \`${command}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      # - name: Merge Pull Request
      #   if: steps.apply.outcome == 'success'
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       await github.rest.pulls.merge({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         pull_number: context.issue.number,
      #         merge_method: 'merge'
      #       });
      - name: Hide Previous Comments
        if: steps.apply.outcome != 'success'
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}