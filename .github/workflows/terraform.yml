name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

env:
  ENV: ${{ inputs.environment }}
  AWS_ROLE: arn:aws:iam::{{ secrets.AWS_ACCOUNT }}:role/${{ secrets.AWS_ROLE }}
  AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:

  plan:
  
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read

    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate in the AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: "${{ inputs.aws-assume-role-arn }}"
          aws-region: "${{ inputs.aws-region }}"

      - name: Set working directory dynamically
        id: set-dir
        run: |
          CHANGED_DIR=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^infra/\(aws\|gcp\|oci\)/' | cut -d'/' -f2,3 | uniq)
          echo "CHANGED_DIR=$CHANGED_DIR" >> $GITHUB_ENV
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -check
   
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Workspace
        id: workspace
        run: |
          terraform workspace select ${{ env.ENV }} || terraform workspace new ${{ env.ENV }}

      - name: Terraform Plan
        id: plan
        if: env.CHANGED_DIR != ''
        run: |
          cd infra/aws/$CHANGED_DIR
          terraform plan -detailed-exitcode -no-color -input=false -var-file=${{ env.ENV }}.tfvars -out tfplan > plan_output.txt
        continue-on-error: true
 
      - name: Hide Previous Comments
        uses: kanga333/comment-hider@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment Plan Output
        uses: actions/github-script@v6
        # if: always() && github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let planOutput = fs.readFileSync('./terraform/plan_output.txt', 'utf8');

            const lines = planOutput.split('\n');
            const modifiedLines = lines.map(line => {
                // Analize if line start with this signals: '+', '-' ou '~'
                const trimmedLine = line.trim();
                if (trimmedLine.startsWith('+') || trimmedLine.startsWith('-') || trimmedLine.startsWith('~')) {
                    // Capture the sihnal
                    const sign = trimmedLine[0];
                    // Remove the sign and the first space, then add the corresponding sign at the beginning
                    let newLine = line.replace(/^[+\-~]\s*/, ' ').replace(/^ /, sign === '~' ? '! ' : sign + ' ');
                    return newLine;
                }
                return line;
            });

            // Merge modified lines into a single string
            planOutput = modifiedLines.join('\n');

            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Workspace ðŸ¤–\`${{ steps.workspace.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
  
            \`\`\`diff
            ${planOutput}
            \`\`\`
  
            </details>
            
            \:rocket\: To apply this plan, run this command\: \`\/apply\`

            \n
  
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # terraform:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3


  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ inputs.aws-assume-role-arn }}
  #         role-session-name: GitHub_to_AWS_via_FederatedOIDC
  #         aws-region: ${{ inputs.aws-region }}

  #     - name: Read destroy configuration
  #       id: read-destroy-config
  #       run: |
  #         DESTROY="$(jq -r '.${{ inputs.environment }}' ./infra/destroy_config.json)"
  #         echo "destroy=$(echo $DESTROY)" >> $GITHUB_OUTPUT

  #     - name: Terraform Init
  #       run: |
  #         cd infra && terraform init \
  #           -backend-config="bucket=${{ inputs.aws-statefile-s3-bucket }}" \
  #           -backend-config="key=${{ github.event.repository.name }}" \
  #           -backend-config="region=${{ inputs.aws-region }}" \
  #           -backend-config="dynamodb_table=${{ inputs.aws-lock-dynamodb-table }}"

  #     - name: Terraform Validate
  #       run: terraform validate

  #     - name: Terraform Plan
  #       id: terraform-plan
  #       run: cd infra &&
  #         terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
  #         terraform plan -var-file="./envs/${{ inputs.environment }}/terraform.tfvars" -out="${{ inputs.environment }}.plan"

  #     - name: Terraform Apply
  #       if: steps.read-destroy-config.outputs.destroy != 'true'
  #       id: terraform-apply
  #       run: cd infra &&
  #         terraform workspace select ${{ inputs.environment }} || terraform workspace new ${{ inputs.environment }} &&
  #         terraform apply "${{ inputs.environment }}.plan"